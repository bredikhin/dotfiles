" NeoBundle Scripts {{{1
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'bling/vim-airline'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ruanyl/vim-gh-line'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-sleuth'
NeoBundle 'ntpeters/vim-better-whitespace'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'jremmen/vim-ripgrep'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'elixir-lang/vim-elixir'
NeoBundle 'ElmCast/elm-vim'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'rking/ag.vim'
NeoBundle 'sheerun/vim-polyglot'
NeoBundle 'jeetsukumaran/vim-buffergator'
NeoBundle 'ConradIrwin/vim-bracketed-paste'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'reedes/vim-pencil'
NeoBundle 'junegunn/goyo.vim'
NeoBundle 'plasticboy/vim-markdown'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" Plugin Options {{{1
" scrooloose/nerdtree {{{2
map <c-t> :NERDTreeToggle<CR>
let NERDTreeHijackNetrw=1 "Put Nerdtree into a window
let g:nerdtree_tabs_open_on_gui_startup = 0

" bling/vim-airline {{{2
" Always show statusbar
set laststatus=2

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
let g:airline#extensions#tabline#enabled=1

" Show just the filename
let g:airline#extensions#tabline#fnamemod=':t'

" nanotech/jellybeans.vim {{{2
colorscheme jellybeans

" airblade/vim-gitgutter {{{2
map <c-h> :GitGutterLineHighlightsToggle<CR>
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

" tpope/vim-fugitive {{{2
autocmd BufReadPost fugitive://* set bufhidden=delete

" scrooloose/syntastic {{{2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
map <leader>e :Errors<cr>
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"

" kien/ctrlp.vim {{{
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git directory as the cwd
let g:ctrlp_working_path_mode = 'r'

" Open multiple files in tabs
let g:ctrlp_open_multiple_files = 'i'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

" Use ripgrep in CtrlP
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
  set wildignore+=*/.git/*,*/tmp/*,*.swp
endif

 " jeetsukumaran/vim-buffergator {{{2
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" Use custom keymappings
let g:buffergator_suppress_keymaps = 1

" Previous buffer
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Next buffer
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" SirVer/ultisnips {{{2
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

" reedes/vim-pencil {{{2
set nocompatible
filetype plugin on

let g:pencil#wrapModeDefault = 'soft'

" junegunn/goyo.vim {{{2
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()

nmap <leader>m :Goyo<CR>


" Non-plugin Stuff {{{1
let mapleader = ","
set encoding=utf-8
set backspace=indent,eol,start
set ruler
set showcmd
set incsearch
set hlsearch
set hidden
set history=100
set autoread
set splitright
set splitbelow
set lazyredraw
set modelines=1
set spell spelllang=en_us
set cursorline
" set clipboard=unnamed

" Mouse
set ttyfast
" set mouse=a

" Scrolling
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Completion
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Folding
set foldmethod=indent
set foldnestmax=3
set nofoldenable
nnoremap <space> za
vnoremap <space> zf

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" Highlight last inserted text
nnoremap gV `[v`]

" Remember the last position in a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Group swap and backup files
set backupdir=./.backup,~/.backup,.,/tmp
set dir=~/tmp

" Day One
function! NewDayOne(...)
  let cmd = ':silent w !dayone new'
  if a:0 > 0
    let cmd = join([cmd, ' -t ', a:1])
    if a:0 > 1
      let cmd = join([cmd, ' -j ', a:2])
    endif
  endif

  execute cmd
endfunc
command! -nargs=* Dayone call NewDayOne(<f-args>)
nmap <leader>mp :call NewDayOne('morning\ pages', 'Дневник')<CR>

" Bindings {{{1
" Open a new empty buffer
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
nmap <leader>q :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Close all the open buffers
nmap <leader>z :bufdo bd<CR>

" Refresh .vimrc
map <leader>rr :source ~/.vimrc<CR>

" Edit .vimrc file
nmap <leader>v :e ~/.vimrc<CR>

" ESC
inoremap jj <ESC>

" Fixed n/N search direction
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Keep selection after the shift
xnoremap <  <gv
xnoremap >  >gv

" Editor / text type-specific settings {{{1
if has('gui_macvim')
  set spell spelllang=en_us,ru_ru
  set autoindent
  set colorcolumn=0
  set nonumber
  set norelativenumber
  let macvim_hig_shift_movement = 1
  iabbrev -- —

  augroup pencil
    autocmd!
    autocmd BufEnter * call pencil#init()
  augroup END
else
  set number
  set relativenumber
  syntax on
endif

" vim:foldenable:foldmethod=marker:foldlevel=0
