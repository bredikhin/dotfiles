" NeoBundle Scripts {{{
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-sleuth'
" NeoBundle 'scrooloose/nerdtree'
" NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'ntpeters/vim-better-whitespace'
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'bling/vim-airline'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'FelikZ/ctrlp-py-matcher'
NeoBundle 'ruanyl/vim-gh-line'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'nanotech/jellybeans.vim'
" NeoBundle 'altercation/vim-colors-solarized'
" NeoBundle 'sjl/badwolf'
NeoBundle 'tpope/vim-surround'
NeoBundle 'Raimondi/delimitMate'
" NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'rking/ag.vim'
" NeoBundle 'sheerun/vim-polyglot'
" NeoBundle 'jeetsukumaran/vim-buffergator'
NeoBundle 'dag/vim2hs'
NeoBundle 'reedes/vim-thematic'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'elixir-lang/vim-elixir'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
" }}}

" Plugin Options {{{
" airblade/vim-gitgutter {{{
map <c-h> :GitGutterLineHighlightsToggle<CR>
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
" }}}

" scrooloose/nerdtree {{{
" map <c-t> :NERDTreeToggle<CR>
" let NERDTreeHijackNetrw=1 "Put Nerdtree into a window
" }}}

" bling/vim-airline {{{
" Always show statusbar
set laststatus=2

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
let g:airline#extensions#tabline#enabled=1

" Show just the filename
let g:airline#extensions#tabline#fnamemod=':t'
" }}}

" kien/ctrlp.vim {{{
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git directory as the cwd
let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>
" }}}

" FelikZ/ctrlp-py-matcher {{{
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" }}}

" scrooloose/syntastic {{{
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
map <leader>e :Errors<cr>
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
" }}}

" nanotech/jellybeans.vim {{{
colorscheme jellybeans
" }}}

" altercation/vim-colors-solarized {{{
let g:solarized_termcolors = 256
" }}}

" sjl/badwolf {{{
" colorscheme badwolf
" }}}

" jeetsukumaran/vim-buffergator {{{
" Use the right side of the screen
" let g:buffergator_viewport_split_policy = 'R'

" Use custom keymappings
" let g:buffergator_suppress_keymaps = 1

" Previous buffer
" nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Next buffer
" nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
" nmap <leader>bl :BuffergatorOpen<cr>
" }}}

" reedes/vim-thematic {{{
let g:thematic#defaults = {
\   'background': 'dark'
\ }
let g:thematic#themes = {
\   'jellybeans': {
\   },
\   'solarized': {
\   },
\   'badwolf': {
\   },
\   'light': {
\     'colorscheme': 'solarized',
\     'background': 'light'
\   }
\ }
" }}}
" }}}

" Non-plugin Stuff {{{
let mapleader = ","
set encoding=utf-8
set backspace=indent,eol,start
set ruler
set number
set showcmd
set incsearch
set hlsearch
set hidden
set history=100
set autoread
set splitright
set splitbelow
set lazyredraw
syntax on
set modelines=1

" Mouse
set ttyfast
" set mouse=a

" Scrolling
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Completion
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Folding
set foldmethod=indent
set foldnestmax=3
set nofoldenable
nnoremap <space> za
vnoremap <space> zf

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" Highlight last inserted text
nnoremap gV `[v`]

" Remember the last position in a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Group swap and backup files
set backupdir=./.backup,~/.backup,.,/tmp
set dir=~/tmp
" }}}

" Bindings {{{
" Open a new empty buffer
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Refresh .vimrc
map <leader>rr :source ~/.vimrc<CR>

" ESC
inoremap jj <ESC>

" Fixed n/N search direction
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Keep selection after the shift
xnoremap <  <gv
xnoremap >  >gv
" }}}

" vim:foldenable:foldmethod=marker:foldlevel=0
