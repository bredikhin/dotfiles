" NeoBundle Scripts {{{1
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'Shougo/neobundle.vim' " Plugin management
NeoBundle 'scrooloose/nerdtree' " NERDTree
NeoBundle 'bling/vim-airline' " Status bar
NeoBundle 'nanotech/jellybeans.vim' " Colorscheme
NeoBundle 'airblade/vim-gitgutter' " Git commands
NeoBundle 'tpope/vim-fugitive' " Gdiff, etc.
NeoBundle 'ruanyl/vim-gh-line' " Jump to the line on Github
NeoBundle 'tpope/vim-sleuth' " Heuristic indentation
NeoBundle 'tpope/vim-surround' " Adds new verbs to operate surroundings, e.g. cst<h1>
NeoBundle 'tpope/vim-repeat' " Makes plugin-based actions repeatable
NeoBundle 'tpope/vim-commentary' " Adds a new verb gc to comment / uncomment lines, words, etc.
NeoBundle 'ntpeters/vim-better-whitespace' " Mark extra whitespaces
NeoBundle 'Raimondi/delimitMate' " Autocompletion for quotes, parenthesis, etc.
NeoBundle 'sheerun/vim-polyglot' " Language packs for Vim
NeoBundle 'dense-analysis/ale' " Linting
NeoBundle 'jeetsukumaran/vim-buffergator' " Better buffer management
NeoBundle 'ConradIrwin/vim-bracketed-paste' " Paste without entering the paste mode
NeoBundle 'reedes/vim-pencil' " Better prose writing
NeoBundle 'junegunn/goyo.vim' " Focused mode
NeoBundle 'plasticboy/vim-markdown' " Better markdown
NeoBundle 'luochen1990/rainbow' " Colored paired braces, etc.
NeoBundle 'takac/vim-hardtime' " Vim-trainer to improve the usage of the movement keys
NeoBundle 'junegunn/fzf.vim' " Fuzzy searching
NeoBundle 'neoclide/coc.nvim', 'release', { 'build': { 'others': 'git checkout release' } } " Intellisense engine for Vim
NeoBundle 'ludovicchabant/vim-gutentags' " Tag management
NeoBundle 'prettier/vim-prettier' " Prettier formatter

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" Plugin Options {{{1
" scrooloose/nerdtree {{{2
map <c-t> :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>
let NERDTreeHijackNetrw=1 "Put Nerdtree into a window

" bling/vim-airline {{{2
" Always show statusbar
set laststatus=2

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
let g:airline#extensions#tabline#enabled=1

" Show just the filename
let g:airline#extensions#tabline#fnamemod=':t'

" nanotech/jellybeans.vim {{{2
colorscheme jellybeans

" airblade/vim-gitgutter {{{2
map <c-h> :GitGutterLineHighlightsToggle<CR>
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

" tpope/vim-fugitive {{{2
autocmd BufReadPost fugitive://* set bufhidden=delete

 " jeetsukumaran/vim-buffergator {{{2
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" Use custom keymappings
let g:buffergator_suppress_keymaps = 1

" Previous buffer
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Next buffer
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" reedes/vim-pencil {{{2
set nocompatible
filetype plugin on
let g:pencil#wrapModeDefault = 'soft'

" junegunn/goyo.vim {{{2
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()

nmap <leader>m :Goyo<CR>

" luochen1990/rainbow {{{2
let g:rainbow_active = 1

" takac/vim-hardtime {{{2
let g:hardtime_default_on = 1
let g:list_of_normal_keys = ["-", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:list_of_visual_keys = ["-", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:list_of_insert_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:list_of_disabled_keys = []
let g:hardtime_ignore_buffer_patterns = [ "NERD.*" ]
let g:hardtime_ignore_quickfix = 1
let g:hardtime_allow_different_key = 1
let g:hardtime_maxcount = 2

" junegunn/fzf.vim {{{2
set rtp+=/usr/local/opt/fzf

" CtrlP replacement
nnoremap <C-p> :GFiles<Cr>
nnoremap <C-f> :Files<Cr>

" Rg replacement
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)
" Fuzzy search defined commands
nnoremap <C-c> :Commands<CR>
" Fuzzy search through :command history
nnoremap <C-h> :History<CR>

" ludovicchabant/vim-gutentags {{{2
set statusline+=%{gutentags#statusline()}
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')

" dense-analysis/ale {{{2
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_javascript_prettier_options = '--stdin-filepath'
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-e> <Plug>(ale_next_wrap)
function! AleStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d⨉ %d⚠ ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{AleStatus()}

" prettier/vim-prettier {{{2
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync

" Non-plugin Stuff {{{1
let mapleader = ","
set encoding=utf-8
set backspace=indent,eol,start
set ruler
set showcmd
set incsearch
set hlsearch
set hidden
set history=100
set autoread
set splitright
set splitbelow
set lazyredraw
set modelines=1
set spell spelllang=en_us
set cursorline

" Search results
set shortmess-=S

" Mouse
set ttyfast

" Scrolling
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Completion
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Folding
set foldmethod=indent
set foldnestmax=3
set nofoldenable
nnoremap <space> za
vnoremap <space> zf

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" Highlight last inserted text
nnoremap gV `[v`]

" Remember the last position in a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Group swap and backup files
set backupdir=./.backup,~/.backup,.,/tmp
set dir=~/tmp

" Bindings {{{1
" Open a new empty buffer
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader><S-l> :bprevious<CR>

" Close the current buffer and move to the previous one
nmap <leader>q :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Close all the open buffers
nmap <leader>z :bufdo bd<CR>

" Refresh .vimrc
map <leader>rr :source ~/.vimrc<CR>

" Edit .vimrc file
nmap <leader>v :e ~/.vimrc<CR>

" ESC
inoremap jj <ESC>
inoremap ,, <ESC>:w<CR>

" Quick close
nmap Q :bd<CR>

" Fixed n/N search direction
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Keep selection after the shift
xnoremap <  <gv
xnoremap >  >gv

" Editor / text type-specific settings {{{1
if has('gui_macvim')
  set spell spelllang=en_us,ru_ru
  set autoindent
  set colorcolumn=0
  set nonumber
  set norelativenumber
  let macvim_hig_shift_movement = 1
  iabbrev -- —

  augroup pencil
    autocmd!
    autocmd BufEnter * call pencil#init()
  augroup END
else
  set number
  set relativenumber
  syntax on
endif

" vim:foldenable:foldmethod=marker:foldlevel=0
